package codegen

import (
	"errors"
	"fmt"
	"path/filepath"
	"strings"

	l "github.com/randomdude16671/mini-build/language"
)

type NASM_GenerationEnv struct {
	evalMode l.EvalMode            // the evaluation mode to compile to
	tasks    map[string]*l.TaskDef // { "name": TaskDef }
	Program  l.Program             // Program to parse  and compile into IR
}

type NASM_Generator struct {
	output       *strings.Builder
	file         string
	currentLabel string
	env          *NASM_GenerationEnv // Env for runtime values
}

func New_NASM_Generator(outputBuilder *strings.Builder, file string) *NASM_Generator {
	filepathAbs, err := filepath.Abs(file)
	if err != nil {
		fmt.Printf("Error: %v\n", err)
		return nil
	}
	return &NASM_Generator{
		output: outputBuilder,
		file:   filepathAbs,
	}
}

// Function to add the important comments to the strings builder into the output
func (n *NASM_Generator) AddComments() error {
	if n.output.String() != "" {
		return errors.New("the builder has to be empty to add the comments")
	}
	n.output.WriteString("# Generated by mini-build")

	// This is just in case the user generates and opens the IR file
	n.output.WriteString("# THIS FILE IS NOT INTENDED FOR EDITING, THIS IS THE IR OUTPUT OF `mini-build`'s COMPILATION.")
	return nil
}

func (n *NASM_Generator) RegisterTask(task *l.TaskDef) {
	n.env.tasks[task.Name] = task
}

func (n *NASM_Generator) LoadEnv() {
	for _, stmt := range n.env.Program.Statements {
		if stmt.Type() == l.TaskDefNode {
			task := stmt.(*l.TaskDef)
			n.RegisterTask(task)
		}
	}
}
